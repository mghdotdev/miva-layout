{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Miva Layout - API Documentation # Lorem ipsum dolor sit amet, consectetur adipisicing elit. Cumque, eum aliquam ea voluptates ut temporibus placeat quam expedita illo, tempore deserunt mollitia rerum reprehenderit provident dignissimos beatae maiores, sunt, vero!","title":"About"},{"location":"#miva-layout-api-documentation","text":"Lorem ipsum dolor sit amet, consectetur adipisicing elit. Cumque, eum aliquam ea voluptates ut temporibus placeat quam expedita illo, tempore deserunt mollitia rerum reprehenderit provident dignissimos beatae maiores, sunt, vero!","title":"Miva Layout - API Documentation"},{"location":"MivaLayout/","text":"Class: MivaLayout # Overview # Usage # var layout = new MivaLayout ( jsonObject [, options ] ); Arguments # Param Type Details layout Object A JSON object form of a loaded Layout. See Examples for an example of how to obtain this JSON object. options (optional) Object An optional configuration object that lets you customize the MivaLayout Class settings. Options # Key Default Details configComponentCode 'config' A string representing what type of component to search for within the Layout for use in the Config slot. exposeFullConfigComponent false Whether or not to expose the full Config component or only the attribute tree. Defaults to only exposing the attribute tree. pullConfigComponent true Whether or not to remove the Config component when found within the Layout. Defaults to true . suppressWarnings false Suppresses all warnings outputted to the console. Defaults to false . Properties # Key Type Details options Object Structure containing the currently active options. $layout Object Array The original layout array/object passed in the constructor. components Array.<MivaLayoutComponentTree> The optimized array layout via a MivaLayoutComponentTree instance. $components Object A dictionary style \"flat\" component list. config Object.<MivaLayoutComponent> The identified \"config\" component from the layout tree. defaultState Object The initial State Object created after running the createState method. state Object The current and active State Object. Created after running the createState method. Methods # createState( defaultComponentStateData ); # Create a MivaLayout State Object . A State Object is a dictionary style object that uses each individual component's ID as a key. It allows the developer to store relevant data in a global location. This simplifies state management when working with a front-end framework like Angular, Vue or React. Parameters # Param Type Details defaultComponentStateData Function Object Accepts either an object or a function. The value returned from the function will be used as the defaultState within the layout for each Component Data Object within the State Object. Developer Note When using an object literal all components will NOT share the same reference to the object. The object literal will be cloned before assigning to each component slot. If you would like to share state between components, use the syncState function. Returns # undefined \u2003\u2014\u2003 No return specified. Examples # as Function var layout = new MivaLayout ( json ); // creating state with a function layout . createState ( function ( component ) { // reference to each \"component\" within the layout if ( component . type == 'myComponentType' ) { return { myComponentData : 'Hello World!' }; } return {}; }); // - output { 101 : { myComponentData : 'Hello World!' , ... }, 102 : { ... }, 103 : { ... }, ... } as Object var layout = new MivaLayout ( json ); // creating state with a basic object layout . createState ( { key : 'value' } ); // - output { 101 : { key : 'value' , ... }, 102 : { key : 'value' , ... }, 103 : { key : 'value' , ... }, ... } mergeState( stateObject ); # Attempts to merge the current state with the passed parameter. The attributes hash stored in the __attributes__ property on a State Object is checked to determine if a Component's attributes have changed from the server. This function is useful when storing the State Object in sessionStorage , localStorage or a similar method. Parameters # Param Type Details stateObject Object The State Object to be merged. Returns # undefined \u2003\u2014\u2003 No return specified. getComponentState( componentId ); # Retreive a specific Component's state data from the State Object by ID. Parameters # Param Type Details componentId Number A number representing a component's ID present within the State Object. Returns # Object undefined \u2003\u2014\u2003 The component data object. undefined if not found. setComponentState( componentId, componentState ); # Overwrite a specific component's state data object by ID. Parameters # Param Type Details componentId Number A number representing a component's ID present within the State Object. componentState Object A component state data object. Must contain a hash of the component's attributes object at the __attributes__ key. Returns # undefined \u2003\u2014\u2003 No return specified. syncState( components ); # Overwrites the passed array of MivaLayoutComponent instances current Component State Data with the first component within the array. The objects will be linked by reference and changes made to one will update all. Parameters # Param Type Details components Array.<MivaLayoutComponent> Array of MivaLayoutComponent instances to be synced. Returns # undefined \u2003\u2014\u2003 No return specified. exportState( [ pretty ] ); # Returns a JSON string of the current State Object. Use the optional pretty parameter to format the JSON string. Parameters # Param Type Details pretty (optional) Boolean Add a \\t character as the whitespace insertion character. Defaults to false . Optional. Returns # String \u2003\u2014\u2003 Stringified JSON State Object. toJSON(); # A special method that overwrites the default JSON . stringify output. See toJSON() Behavior for more information. Parameters # None. Returns # undefined \u2003\u2014\u2003 No return specified.","title":"Class Information"},{"location":"MivaLayout/#class-mivalayout","text":"","title":"Class: MivaLayout"},{"location":"MivaLayout/#overview","text":"","title":"Overview"},{"location":"MivaLayout/#usage","text":"var layout = new MivaLayout ( jsonObject [, options ] );","title":"Usage"},{"location":"MivaLayout/#arguments","text":"Param Type Details layout Object A JSON object form of a loaded Layout. See Examples for an example of how to obtain this JSON object. options (optional) Object An optional configuration object that lets you customize the MivaLayout Class settings.","title":"Arguments"},{"location":"MivaLayout/#options","text":"Key Default Details configComponentCode 'config' A string representing what type of component to search for within the Layout for use in the Config slot. exposeFullConfigComponent false Whether or not to expose the full Config component or only the attribute tree. Defaults to only exposing the attribute tree. pullConfigComponent true Whether or not to remove the Config component when found within the Layout. Defaults to true . suppressWarnings false Suppresses all warnings outputted to the console. Defaults to false .","title":"Options"},{"location":"MivaLayout/#properties","text":"Key Type Details options Object Structure containing the currently active options. $layout Object Array The original layout array/object passed in the constructor. components Array.<MivaLayoutComponentTree> The optimized array layout via a MivaLayoutComponentTree instance. $components Object A dictionary style \"flat\" component list. config Object.<MivaLayoutComponent> The identified \"config\" component from the layout tree. defaultState Object The initial State Object created after running the createState method. state Object The current and active State Object. Created after running the createState method.","title":"Properties"},{"location":"MivaLayout/#methods","text":"","title":"Methods"},{"location":"MivaLayout/#createstate-defaultcomponentstatedata","text":"Create a MivaLayout State Object . A State Object is a dictionary style object that uses each individual component's ID as a key. It allows the developer to store relevant data in a global location. This simplifies state management when working with a front-end framework like Angular, Vue or React.","title":"createState( defaultComponentStateData );"},{"location":"MivaLayout/#parameters","text":"Param Type Details defaultComponentStateData Function Object Accepts either an object or a function. The value returned from the function will be used as the defaultState within the layout for each Component Data Object within the State Object. Developer Note When using an object literal all components will NOT share the same reference to the object. The object literal will be cloned before assigning to each component slot. If you would like to share state between components, use the syncState function.","title":"Parameters"},{"location":"MivaLayout/#returns","text":"undefined \u2003\u2014\u2003 No return specified.","title":"Returns"},{"location":"MivaLayout/#examples","text":"as Function var layout = new MivaLayout ( json ); // creating state with a function layout . createState ( function ( component ) { // reference to each \"component\" within the layout if ( component . type == 'myComponentType' ) { return { myComponentData : 'Hello World!' }; } return {}; }); // - output { 101 : { myComponentData : 'Hello World!' , ... }, 102 : { ... }, 103 : { ... }, ... } as Object var layout = new MivaLayout ( json ); // creating state with a basic object layout . createState ( { key : 'value' } ); // - output { 101 : { key : 'value' , ... }, 102 : { key : 'value' , ... }, 103 : { key : 'value' , ... }, ... }","title":"Examples"},{"location":"MivaLayout/#mergestate-stateobject","text":"Attempts to merge the current state with the passed parameter. The attributes hash stored in the __attributes__ property on a State Object is checked to determine if a Component's attributes have changed from the server. This function is useful when storing the State Object in sessionStorage , localStorage or a similar method.","title":"mergeState( stateObject );"},{"location":"MivaLayout/#parameters_1","text":"Param Type Details stateObject Object The State Object to be merged.","title":"Parameters"},{"location":"MivaLayout/#returns_1","text":"undefined \u2003\u2014\u2003 No return specified.","title":"Returns"},{"location":"MivaLayout/#getcomponentstate-componentid","text":"Retreive a specific Component's state data from the State Object by ID.","title":"getComponentState( componentId );"},{"location":"MivaLayout/#parameters_2","text":"Param Type Details componentId Number A number representing a component's ID present within the State Object.","title":"Parameters"},{"location":"MivaLayout/#returns_2","text":"Object undefined \u2003\u2014\u2003 The component data object. undefined if not found.","title":"Returns"},{"location":"MivaLayout/#setcomponentstate-componentid-componentstate","text":"Overwrite a specific component's state data object by ID.","title":"setComponentState( componentId, componentState );"},{"location":"MivaLayout/#parameters_3","text":"Param Type Details componentId Number A number representing a component's ID present within the State Object. componentState Object A component state data object. Must contain a hash of the component's attributes object at the __attributes__ key.","title":"Parameters"},{"location":"MivaLayout/#returns_3","text":"undefined \u2003\u2014\u2003 No return specified.","title":"Returns"},{"location":"MivaLayout/#syncstate-components","text":"Overwrites the passed array of MivaLayoutComponent instances current Component State Data with the first component within the array. The objects will be linked by reference and changes made to one will update all.","title":"syncState( components );"},{"location":"MivaLayout/#parameters_4","text":"Param Type Details components Array.<MivaLayoutComponent> Array of MivaLayoutComponent instances to be synced.","title":"Parameters"},{"location":"MivaLayout/#returns_4","text":"undefined \u2003\u2014\u2003 No return specified.","title":"Returns"},{"location":"MivaLayout/#exportstate-pretty","text":"Returns a JSON string of the current State Object. Use the optional pretty parameter to format the JSON string.","title":"exportState( [ pretty ] );"},{"location":"MivaLayout/#parameters_5","text":"Param Type Details pretty (optional) Boolean Add a \\t character as the whitespace insertion character. Defaults to false . Optional.","title":"Parameters"},{"location":"MivaLayout/#returns_5","text":"String \u2003\u2014\u2003 Stringified JSON State Object.","title":"Returns"},{"location":"MivaLayout/#tojson","text":"A special method that overwrites the default JSON . stringify output. See toJSON() Behavior for more information.","title":"toJSON();"},{"location":"MivaLayout/#parameters_6","text":"None.","title":"Parameters"},{"location":"MivaLayout/#returns_6","text":"undefined \u2003\u2014\u2003 No return specified.","title":"Returns"},{"location":"MivaLayout/StateObject/","text":"State Object # Overview # Structure # Component Data Object # This object type will be the value of the componentId keys within the State Object. The __attributes__ Key # Every component data object must contain a key __attributes__ that contains a hash of the component.attributes object. Hashing can be done using the object-hash NPM package. Example # // State Object - example { // Component Data Object - example \"101\": { \"__attributes__\": \"2d83da37c10c3ff108e99cabc1a7c5f46716f859\", \"openChildId\": null }, \"102\": { \"__attributes__\": \"a747a6d0d7a79c97798bffde2d7613892d9e2c54\", \"savedProductCode\": null }, \"103\": { \"__attributes__\": \"0aaba145f5134027b0fb9855cd96bc4b2611abbc\", \"savedProductCode\": null }, \"104\": { \"__attributes__\": \"76c21af95c62bd1bfbf36e69771fcaec936c63b3\", \"savedProductCode\": null }, \"105\": { \"__attributes__\": \"4e994448f135a5eaee787164853348ed7a3a5d78\" \"openChildId\": 106 }, \"106\": { \"__attributes__\": \"ec259de0da64760de58a2c5d705a1707b25b0672\", \"savedProductCode\": \"abc123\" }, \"107\": { \"__attributes__\": \"704101730b956fa47e7b679c4f7c37cfb13a2120\", \"savedProductCode\": null }, \"108\": { \"__attributes__\": \"0aaba145f5134027b0fb9855cd96bc4b2611abbc\", \"savedProductCode\": null }, \"109\": { \"__attributes__\": \"76c21af95c62bd1bfbf36e69771fcaec936c63b3\", \"savedProductCode\": null }, \"110\": { \"__attributes__\": \"4e994448f135a5eaee787164853348ed7a3a5d78\", \"savedProductCode\": null } }","title":"State Object"},{"location":"MivaLayout/StateObject/#state-object","text":"","title":"State Object"},{"location":"MivaLayout/StateObject/#overview","text":"","title":"Overview"},{"location":"MivaLayout/StateObject/#structure","text":"","title":"Structure"},{"location":"MivaLayout/StateObject/#component-data-object","text":"This object type will be the value of the componentId keys within the State Object.","title":"Component Data Object"},{"location":"MivaLayout/StateObject/#the-__attributes__-key","text":"Every component data object must contain a key __attributes__ that contains a hash of the component.attributes object. Hashing can be done using the object-hash NPM package.","title":"The __attributes__ Key"},{"location":"MivaLayout/StateObject/#example","text":"// State Object - example { // Component Data Object - example \"101\": { \"__attributes__\": \"2d83da37c10c3ff108e99cabc1a7c5f46716f859\", \"openChildId\": null }, \"102\": { \"__attributes__\": \"a747a6d0d7a79c97798bffde2d7613892d9e2c54\", \"savedProductCode\": null }, \"103\": { \"__attributes__\": \"0aaba145f5134027b0fb9855cd96bc4b2611abbc\", \"savedProductCode\": null }, \"104\": { \"__attributes__\": \"76c21af95c62bd1bfbf36e69771fcaec936c63b3\", \"savedProductCode\": null }, \"105\": { \"__attributes__\": \"4e994448f135a5eaee787164853348ed7a3a5d78\" \"openChildId\": 106 }, \"106\": { \"__attributes__\": \"ec259de0da64760de58a2c5d705a1707b25b0672\", \"savedProductCode\": \"abc123\" }, \"107\": { \"__attributes__\": \"704101730b956fa47e7b679c4f7c37cfb13a2120\", \"savedProductCode\": null }, \"108\": { \"__attributes__\": \"0aaba145f5134027b0fb9855cd96bc4b2611abbc\", \"savedProductCode\": null }, \"109\": { \"__attributes__\": \"76c21af95c62bd1bfbf36e69771fcaec936c63b3\", \"savedProductCode\": null }, \"110\": { \"__attributes__\": \"4e994448f135a5eaee787164853348ed7a3a5d78\", \"savedProductCode\": null } }","title":"Example"},{"location":"MivaLayout/examples/","text":"Examples: MivaLayout #","title":"Examples"},{"location":"MivaLayout/examples/#examples-mivalayout","text":"","title":"Examples: MivaLayout"}]}