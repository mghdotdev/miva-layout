{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Miva Layout - API Documentation # View more information by vising each Class's documentation page. MivaLayout MivaLayoutComponentTree MivaLayoutComponent","title":"Overview"},{"location":"#miva-layout-api-documentation","text":"View more information by vising each Class's documentation page. MivaLayout MivaLayoutComponentTree MivaLayoutComponent","title":"Miva Layout - API Documentation"},{"location":"MivaLayout/","text":"Classes \u2192 MivaLayout # Main entry point for miva-layout.js . Optimizes the raw JSON output from the Components & Layouts module. The layout JSON is converted into a MivaLayoutComponentTree instance which is an array of MivaLayoutComponent instances. This class is also responsible for optimizing state management when using the Components & Layouts module with a front-end framework like Angular, Vue or React. Usage # var layout = new MivaLayout ( jsonObject [, options ] ); Arguments # Param Type Details layout Object A JSON object form of a loaded Layout. See Examples for an example of how to obtain this JSON object. options (optional) Object An optional configuration object that lets you customize the MivaLayout Class settings. Options # Key Default Details settingsComponentCode 'settings' A string representing what type of component to search for within the Layout for use in the \"settings\" slot. exposeFullSettingsComponent false Whether or not to expose the full \"settings\" component or only the attribute tree. Defaults to only exposing the attribute tree. pullSettingsComponent true Whether or not to remove the \"settings\" component when found within the Layout. Defaults to true . suppressWarnings false Suppresses all warnings outputted to the console. Defaults to false . componentIdentifier 'code' The default property to access when attempting to load a component's state. Features # The \"Settings\" Component # The \"settings\" feature allows a developer to create a \"top-level\" component to store configuration or global layout data within the Layout. The \"settings\" component by default will be pulled from the MivaLayoutComponentTree it is housed in. The \"settings\" component can be any level deep within the Layout tree and only the first occurrence will be pulled and slotted into the settings property on the MivaLayout instance. Store/State Management # State management is a core feature of miva-layout.js . When creating an application with a Components & Layouts back-end you will often require data to be associated with certain components when in application runtime. The following methods are used to create, manipulate and retrieve the \"State Object\" and \"Component State Data\" objects from the property store stored within the MivaLayout instance. createStore mergeStore getComponentState setComponentState syncComponentStates exportStore","title":"Overview"},{"location":"MivaLayout/#classes-mivalayout","text":"Main entry point for miva-layout.js . Optimizes the raw JSON output from the Components & Layouts module. The layout JSON is converted into a MivaLayoutComponentTree instance which is an array of MivaLayoutComponent instances. This class is also responsible for optimizing state management when using the Components & Layouts module with a front-end framework like Angular, Vue or React.","title":"Classes \u2192 MivaLayout"},{"location":"MivaLayout/#usage","text":"var layout = new MivaLayout ( jsonObject [, options ] );","title":"Usage"},{"location":"MivaLayout/#arguments","text":"Param Type Details layout Object A JSON object form of a loaded Layout. See Examples for an example of how to obtain this JSON object. options (optional) Object An optional configuration object that lets you customize the MivaLayout Class settings.","title":"Arguments"},{"location":"MivaLayout/#options","text":"Key Default Details settingsComponentCode 'settings' A string representing what type of component to search for within the Layout for use in the \"settings\" slot. exposeFullSettingsComponent false Whether or not to expose the full \"settings\" component or only the attribute tree. Defaults to only exposing the attribute tree. pullSettingsComponent true Whether or not to remove the \"settings\" component when found within the Layout. Defaults to true . suppressWarnings false Suppresses all warnings outputted to the console. Defaults to false . componentIdentifier 'code' The default property to access when attempting to load a component's state.","title":"Options"},{"location":"MivaLayout/#features","text":"","title":"Features"},{"location":"MivaLayout/#the-settings-component","text":"The \"settings\" feature allows a developer to create a \"top-level\" component to store configuration or global layout data within the Layout. The \"settings\" component by default will be pulled from the MivaLayoutComponentTree it is housed in. The \"settings\" component can be any level deep within the Layout tree and only the first occurrence will be pulled and slotted into the settings property on the MivaLayout instance.","title":"The \"Settings\" Component"},{"location":"MivaLayout/#storestate-management","text":"State management is a core feature of miva-layout.js . When creating an application with a Components & Layouts back-end you will often require data to be associated with certain components when in application runtime. The following methods are used to create, manipulate and retrieve the \"State Object\" and \"Component State Data\" objects from the property store stored within the MivaLayout instance. createStore mergeStore getComponentState setComponentState syncComponentStates exportStore","title":"Store/State Management"},{"location":"MivaLayout/methods/","text":"Classes \u2192 MivaLayout \u2192 Methods # createStore( defaultComponentStateData ); # Create a MivaLayout Store Object. A Store Object is a dictionary style object that uses each individual component's current componentIdentifer setting as a key. It allows the developer to store relevant data in a global location. This simplifies state management when working with a front-end framework like Angular, Vue or React. Parameters # Param Type Details defaultComponentStateData Function Object Accepts either an object or a function. The value returned from the function will be used as the defaultState within the layout for each Component Data Object within the Store Object. Developer Note When using an object literal all components will NOT share the same reference to the object. The object literal will be cloned before assigning to each component slot. If you would like to share state between components, use the syncState function. Returns # Object.<MivaLayout> \u2003\u2014\u2003 Returns the current MivaLayout instance to allow method chaining. Examples # as Function var layout = new MivaLayout ( json ); // creating the store with a function layout . createStore ( function ( component ) { // reference to each \"component\" within the layout if ( component . type == 'myComponentType' ) { return { myComponentData : 'Hello World!' }; } return {}; }); // - output { 101 : { myComponentData : 'Hello World!' , ... }, 102 : { ... }, 103 : { ... }, ... } as Object var layout = new MivaLayout ( json ); // creating store with a basic object layout . createStore ( { key : 'value' } ); // - output { 101 : { key : 'value' , ... }, 102 : { key : 'value' , ... }, 103 : { key : 'value' , ... }, ... } mergeStore( storeObject, componentIdentifierMap ); # Attempts to merge the current store with the passed parameter. The attributes hash stored in the __attributes__ property on a Store Object is checked to determine if a Component's attributes have changed from the server. This function is useful when storing the Store Object in sessionStorage , localStorage or a similar method. Parameters # Param Type Details storeObject Object The Store Object to be merged. Returns # Object.<MivaLayout> \u2003\u2014\u2003 Returns the current MivaLayout instance to allow method chaining. getComponentState( componentIdentifer ); # Retreive a specific Component's state data from the Store Object by the current componentIdentifer setting. Parameters # Param Type Details componentIdentifer Mixed An ID / code (componentIdentifier) present within the Store Object. Returns # Object undefined \u2003\u2014\u2003 The component data object. undefined if not found. setComponentState( componentIdentifer, componentState ); # Overwrite a specific component's state data object by the current componentIdentifer setting. Parameters # Param Type Details componentIdentifer Mixed An ID / code (componentIdentifier) present within the Store Object. componentState Object A component state data object. Must contain a hash of the component's attributes object at the __attributes__ key. Returns # Object.<MivaLayout> \u2003\u2014\u2003 Returns the current MivaLayout instance to allow method chaining. syncComponentStates( components ); # Overwrites the passed array of MivaLayoutComponent instances current Component State Data with the first component within the array. The objects will be linked by reference and changes made to one will update all. Parameters # Param Type Details components Array.<MivaLayoutComponent> Array of MivaLayoutComponent instances to be synced. Returns # Object.<MivaLayout> \u2003\u2014\u2003 Returns the current MivaLayout instance to allow method chaining. exportStore( [ pretty ] ); # Returns a JSON string of the current Store Object. Use the optional pretty parameter to format the JSON string. Parameters # Param Type Details pretty (optional) Boolean Add a \\t character as the whitespace insertion character. Defaults to false . Optional. Returns # String \u2003\u2014\u2003 Stringified JSON Store Object. Static Methods # Functions/Methods that will be accessable directly from the MivaLayout global (not an instance property). Like new MivaLayout.Component( ... ) . Component # A global reference to the MivaLayoutComponent class. ComponentTree # A global reference to the MivaLayoutComponentTree class.","title":"Methods"},{"location":"MivaLayout/methods/#classes-mivalayout-methods","text":"","title":"Classes \u2192 MivaLayout \u2192 Methods"},{"location":"MivaLayout/methods/#createstore-defaultcomponentstatedata","text":"Create a MivaLayout Store Object. A Store Object is a dictionary style object that uses each individual component's current componentIdentifer setting as a key. It allows the developer to store relevant data in a global location. This simplifies state management when working with a front-end framework like Angular, Vue or React.","title":"createStore( defaultComponentStateData );"},{"location":"MivaLayout/methods/#parameters","text":"Param Type Details defaultComponentStateData Function Object Accepts either an object or a function. The value returned from the function will be used as the defaultState within the layout for each Component Data Object within the Store Object. Developer Note When using an object literal all components will NOT share the same reference to the object. The object literal will be cloned before assigning to each component slot. If you would like to share state between components, use the syncState function.","title":"Parameters"},{"location":"MivaLayout/methods/#returns","text":"Object.<MivaLayout> \u2003\u2014\u2003 Returns the current MivaLayout instance to allow method chaining.","title":"Returns"},{"location":"MivaLayout/methods/#examples","text":"as Function var layout = new MivaLayout ( json ); // creating the store with a function layout . createStore ( function ( component ) { // reference to each \"component\" within the layout if ( component . type == 'myComponentType' ) { return { myComponentData : 'Hello World!' }; } return {}; }); // - output { 101 : { myComponentData : 'Hello World!' , ... }, 102 : { ... }, 103 : { ... }, ... } as Object var layout = new MivaLayout ( json ); // creating store with a basic object layout . createStore ( { key : 'value' } ); // - output { 101 : { key : 'value' , ... }, 102 : { key : 'value' , ... }, 103 : { key : 'value' , ... }, ... }","title":"Examples"},{"location":"MivaLayout/methods/#mergestore-storeobject-componentidentifiermap","text":"Attempts to merge the current store with the passed parameter. The attributes hash stored in the __attributes__ property on a Store Object is checked to determine if a Component's attributes have changed from the server. This function is useful when storing the Store Object in sessionStorage , localStorage or a similar method.","title":"mergeStore( storeObject, componentIdentifierMap );"},{"location":"MivaLayout/methods/#parameters_1","text":"Param Type Details storeObject Object The Store Object to be merged.","title":"Parameters"},{"location":"MivaLayout/methods/#returns_1","text":"Object.<MivaLayout> \u2003\u2014\u2003 Returns the current MivaLayout instance to allow method chaining.","title":"Returns"},{"location":"MivaLayout/methods/#getcomponentstate-componentidentifer","text":"Retreive a specific Component's state data from the Store Object by the current componentIdentifer setting.","title":"getComponentState( componentIdentifer );"},{"location":"MivaLayout/methods/#parameters_2","text":"Param Type Details componentIdentifer Mixed An ID / code (componentIdentifier) present within the Store Object.","title":"Parameters"},{"location":"MivaLayout/methods/#returns_2","text":"Object undefined \u2003\u2014\u2003 The component data object. undefined if not found.","title":"Returns"},{"location":"MivaLayout/methods/#setcomponentstate-componentidentifer-componentstate","text":"Overwrite a specific component's state data object by the current componentIdentifer setting.","title":"setComponentState( componentIdentifer, componentState );"},{"location":"MivaLayout/methods/#parameters_3","text":"Param Type Details componentIdentifer Mixed An ID / code (componentIdentifier) present within the Store Object. componentState Object A component state data object. Must contain a hash of the component's attributes object at the __attributes__ key.","title":"Parameters"},{"location":"MivaLayout/methods/#returns_3","text":"Object.<MivaLayout> \u2003\u2014\u2003 Returns the current MivaLayout instance to allow method chaining.","title":"Returns"},{"location":"MivaLayout/methods/#synccomponentstates-components","text":"Overwrites the passed array of MivaLayoutComponent instances current Component State Data with the first component within the array. The objects will be linked by reference and changes made to one will update all.","title":"syncComponentStates( components );"},{"location":"MivaLayout/methods/#parameters_4","text":"Param Type Details components Array.<MivaLayoutComponent> Array of MivaLayoutComponent instances to be synced.","title":"Parameters"},{"location":"MivaLayout/methods/#returns_4","text":"Object.<MivaLayout> \u2003\u2014\u2003 Returns the current MivaLayout instance to allow method chaining.","title":"Returns"},{"location":"MivaLayout/methods/#exportstore-pretty","text":"Returns a JSON string of the current Store Object. Use the optional pretty parameter to format the JSON string.","title":"exportStore( [ pretty ] );"},{"location":"MivaLayout/methods/#parameters_5","text":"Param Type Details pretty (optional) Boolean Add a \\t character as the whitespace insertion character. Defaults to false . Optional.","title":"Parameters"},{"location":"MivaLayout/methods/#returns_5","text":"String \u2003\u2014\u2003 Stringified JSON Store Object.","title":"Returns"},{"location":"MivaLayout/methods/#static-methods","text":"Functions/Methods that will be accessable directly from the MivaLayout global (not an instance property). Like new MivaLayout.Component( ... ) .","title":"Static Methods"},{"location":"MivaLayout/methods/#component","text":"A global reference to the MivaLayoutComponent class.","title":"Component"},{"location":"MivaLayout/methods/#componenttree","text":"A global reference to the MivaLayoutComponentTree class.","title":"ComponentTree"},{"location":"MivaLayout/properties/","text":"Classes \u2192 MivaLayout \u2192 Properties # $components Array # An array of all the MivaLayoutComponent instances within the layout, flattened. $layout Object Array # The original layout array/object passed in the constructor. $instanceId String # The ID used to store the layout instance in the $instanceCache . components Array.<MivaLayoutComponentTree> # The optimized array layout via a MivaLayoutComponentTree instance. options Object # Structure containing the currently active options . store Object # The current and active Store Object. Created after running the createStore method. Developer Note The store property will NOT be available until AFTER calling the createStore method. settings Object Object.<MivaLayoutComponent> # The attributes or full object of the found Settings Component instance. View available options to control the settings component options. Developer Note The settings property will NOT be available if the settings component was not found. Static Properties # Properties that can be accessed directly via the MivaLayout global (not an instance property). Like MivaLayout.$instanceCache . $instanceCache Array # A global array of MivaLayout instances used to improve performance on internal function calls between MivaLayoutComponent instances.","title":"Properties"},{"location":"MivaLayout/properties/#classes-mivalayout-properties","text":"","title":"Classes \u2192 MivaLayout \u2192 Properties"},{"location":"MivaLayout/properties/#components-array","text":"An array of all the MivaLayoutComponent instances within the layout, flattened.","title":"$components Array"},{"location":"MivaLayout/properties/#layout-objectarray","text":"The original layout array/object passed in the constructor.","title":"$layout ObjectArray"},{"location":"MivaLayout/properties/#instanceid-string","text":"The ID used to store the layout instance in the $instanceCache .","title":"$instanceId String"},{"location":"MivaLayout/properties/#components-arraymivalayoutcomponenttree","text":"The optimized array layout via a MivaLayoutComponentTree instance.","title":"components Array.&lt;MivaLayoutComponentTree&gt;"},{"location":"MivaLayout/properties/#options-object","text":"Structure containing the currently active options .","title":"options Object"},{"location":"MivaLayout/properties/#store-object","text":"The current and active Store Object. Created after running the createStore method. Developer Note The store property will NOT be available until AFTER calling the createStore method.","title":"store Object"},{"location":"MivaLayout/properties/#settings-object-objectmivalayoutcomponent","text":"The attributes or full object of the found Settings Component instance. View available options to control the settings component options. Developer Note The settings property will NOT be available if the settings component was not found.","title":"settings Object Object.&lt;MivaLayoutComponent&gt;"},{"location":"MivaLayout/properties/#static-properties","text":"Properties that can be accessed directly via the MivaLayout global (not an instance property). Like MivaLayout.$instanceCache .","title":"Static Properties"},{"location":"MivaLayout/properties/#instancecache-array","text":"A global array of MivaLayout instances used to improve performance on internal function calls between MivaLayoutComponent instances.","title":"$instanceCache Array"},{"location":"MivaLayoutComponent/","text":"Classes \u2192 MivaLayoutComponent # Lorem ipsum dolor sit amet, consectetur adipisicing elit. Perferendis, quam, quia! Doloribus nisi praesentium placeat dolores repudiandae pariatur, aspernatur facere autem! Maxime, iure eaque! Laboriosam quasi, harum quod facilis qui. Usage # var component = new MivaLayout . Component ( component [, originalIndex , $instanceId ] ); Arguments # Param Type Details param * Lorem ipsum dolor sit amet, consectetur adipisicing elit. --- Examples #","title":"Overview"},{"location":"MivaLayoutComponent/#classes-mivalayoutcomponent","text":"Lorem ipsum dolor sit amet, consectetur adipisicing elit. Perferendis, quam, quia! Doloribus nisi praesentium placeat dolores repudiandae pariatur, aspernatur facere autem! Maxime, iure eaque! Laboriosam quasi, harum quod facilis qui.","title":"Classes \u2192 MivaLayoutComponent"},{"location":"MivaLayoutComponent/#usage","text":"var component = new MivaLayout . Component ( component [, originalIndex , $instanceId ] );","title":"Usage"},{"location":"MivaLayoutComponent/#arguments","text":"Param Type Details param * Lorem ipsum dolor sit amet, consectetur adipisicing elit. ---","title":"Arguments"},{"location":"MivaLayoutComponent/#examples","text":"","title":"Examples"},{"location":"MivaLayoutComponentTree/","text":"Classes \u2192 MivaLayoutComponentTree # Lorem ipsum dolor sit amet, consectetur adipisicing elit. Perferendis, quam, quia! Doloribus nisi praesentium placeat dolores repudiandae pariatur, aspernatur facere autem! Maxime, iure eaque! Laboriosam quasi, harum quod facilis qui. Usage # var components = new MivaLayout . ComponentTree ( components [, $instanceId ] ); Arguments # Param Type Details param * Lorem ipsum dolor sit amet, consectetur adipisicing elit. --- Examples #","title":"Overview"},{"location":"MivaLayoutComponentTree/#classes-mivalayoutcomponenttree","text":"Lorem ipsum dolor sit amet, consectetur adipisicing elit. Perferendis, quam, quia! Doloribus nisi praesentium placeat dolores repudiandae pariatur, aspernatur facere autem! Maxime, iure eaque! Laboriosam quasi, harum quod facilis qui.","title":"Classes \u2192 MivaLayoutComponentTree"},{"location":"MivaLayoutComponentTree/#usage","text":"var components = new MivaLayout . ComponentTree ( components [, $instanceId ] );","title":"Usage"},{"location":"MivaLayoutComponentTree/#arguments","text":"Param Type Details param * Lorem ipsum dolor sit amet, consectetur adipisicing elit. ---","title":"Arguments"},{"location":"MivaLayoutComponentTree/#examples","text":"","title":"Examples"}]}